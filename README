sedlex: a OCaml lexer generator for Unicode

License:
  Copyright (C) 2003, 2004, 2005, 2006, 2013 Alain Frisch and LexiFi
  distributed under the terms of an MIT-like license : see LICENSE

Author:
  email: alain@frisch.fr
  web: http://alain.frisch.fr

--------------------------------------------------------------------------
Overview

- sedlex is a lexer generator for OCaml.

- It is implemented as an OCaml syntax tree rewriter (-ppx).  Lexer
  specifications are embedded in regular OCaml code and use the
  standard OCaml syntax (interpreted in a specific way).

- The lexers work with a new kind of "lexbuf" that supports Unicode.
  A single lexer can work with arbitrary encodings of the input
  stream.

- sedlex is the successor of the ulex project, which was implemented
  as a Camlp4 syntax extension.

--------------------------------------------------------------------------
Lexer specifications

sedlex adds a new kind of expression to OCaml: lexer definitions.
The syntax for the new construction is:

  match SEDLEX lexbuf with
  | R1 -> e1
  ...
  | Rn -> en
  | _  -> def

(The first vertical bar is optional.)

where:
 - lexbuf is an arbitrary lowercase identifier, which must refer to
   an existing value of type [Sedlexing.lexbuf].
 - the Ri are regular expressions (see below);
 - the ei and def are OCaml expressions (called actions) of the same type
   (the type for the whole lexer definitioon).

Unlike ocamllex, lexers work on stream of Unicode codepoints, not
bytes.

The actions can call functions from the Sedlexing module to extract
(parts of) the matched lexeme, in the desired encoding.

Regular expressions are syntactically OCaml patterns:

 - "...." (string constant): recognize the specified string
 - '....' (character constant) : recognize the specified character
 - i (integer constant) : recognize the specified codepoint
 - R1 | R2 : alternation
 - R1, R2, ..., Rn : concatenation
 - Star R : Kleene star (0 or more repetition)
 - Plus R : equivalent to R, R*
 - Opt R : equivalent to ("" | R)
 - Chars "..." : recognize any character in the string
 - Range (i, j) : recognize any codepoint between i and j
 - lid (lowercase identifier) : reference a named regexp (see below)

Note:
 - The OCaml source is assumed to be encoded in Latin1 (for string
   and character literals).


It is possible to define named regular expressions with the following
construction, that can appear in place of of structure item:

  let R as lid = SEDLEX.regexp

where lid is the regexp name to be defined and R its definition.  The
right-hand side must be exactly "SEDLEX.regexp".  The scope of the
"lid" regular expression is the rest of the structure, after the
definition.

The same syntax can be used for local binding:

  let R as lid = SEDLEX.regexp in
  body

The scope of "lid" is the body expression.

--------------------------------------------------------------------------
Predefined regexps

sedlex provides a set of predefined regexps:
- any: any character
- eof: the virtual end-of-file character
- xml_letter, xml_digit, xml_extender, xml_base_char, xml_ideographic,
  xml_combining_char, xml_blank: as defined by the XML recommandation
- tr8876_ident_char: characters names in identifiers from ISO TR8876

--------------------------------------------------------------------------
Running a lexer

See the interface of the Sedlexing module for a description of how to
create lexbuf values (from strings, stream or channels encoded in
Latin1, utf8 or utf16, or from integer arrays or streams representing
Unicode code points).

It is possible to work with a custom implementation for lex buffers.
To do this, you just have to ensure that a module called Sedlexing is
in scope of your lexer specifications, and that it defines at least
the following functions: start, next, mark, backtrack.  See the interface
of the Sedlexing module for more information.


--------------------------------------------------------------------------
Using sedlex

The first thing to do is to compile and install sedlex.  You need a
recent version of OCaml.

  make all
  make opt (* optional *)

1. With findlib

If you have findlib, you can use it to install and use sedlex.
The name of the findlib package is "sedlex".

Installation:

  make install

Compilation of OCaml files with lexer specifications:

  ocamlfind ocamlc -c -package sedlex -ppx "ocamlfind sedlex/sedlex.exe" my_file.ml

When linking, you must also include the sedlex package:
  ocamlfind ocamlc -o my_prog -linkpkg -package sedlex my_file.cmo


2. Without findlib

You can use sedlex without findlib. To compile, you need to run the
source file through -ppx rewriter sedlex.exe. Moreover, you need to
link the application with the runtime support library for sedlex
(sedlexing.cma / sedlexing.cmxa).

--------------------------------------------------------------------------
Acknowledgments

Thanks to Benus Becker for contributing an implementation of Utf16.
